
# models.py
#class Funcionarios(models.Model):
    """
    Modelo que representa um funcionário da empresa.
    
    Atributos:
        nome (CharField): Nome completo do funcionário (max_length=100)
        data_nascimento (DateField): Data de nascimento do funcionário
        telefone (CharField): Número de telefone (max_length=15)
        email (EmailField): Endereço de e-mail único
        sexo (CharField): Sexo do funcionário (choices: M, F, O)
        estatus (IntegerField): Situação atual do funcionário (choices: 1=Ativo, 2=Afastado, etc.)
        documentos (OneToOneField): Relacionamento com os documentos pessoais
        admissao (OneToOneField): Relacionamento com os dados de admissão
        
    Métodos:
        idade: Retorna a idade atual do funcionário
        promover: Atualiza o cargo e salário do funcionário
    """
    # campos existentes...

    #@property
    #def idade(self):
        """Calcula e retorna a idade atual do funcionário com base na data de nascimento."""
        #today = timezone.now().date()
       #born = self.data_nascimento
        #return today.year - born.year - ((today.month, today.day) < (born.month, born.day))

    #def promover(self, novo_cargo, novo_salario):
        """
        Promove o funcionário para um novo cargo com novo salário.
        
        Args:
            novo_cargo (Cargos): Instância do novo cargo
            novo_salario (Decimal): Novo valor do salário
            
        Raises:
            ValueError: Se o novo salário for menor que o salário base do cargo
        """
        #if novo_salario < novo_cargo.salario_base:
        #    raise ValueError("Salário não pode ser menor que o base do cargo")
        #self.admissao.cargo = novo_cargo
        #self.admissao.salario = novo_salario
        #self.admissao.save()